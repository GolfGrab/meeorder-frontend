/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v1/health": {
    get: operations["HealthController_getHealth"];
  };
  "/api/v1/health/ping": {
    get: operations["HealthController_getPing"];
  };
  "/api/v1/categories": {
    get: operations["CategoriesController_getAllCategories"];
    post: operations["CategoriesController_createCategory"];
  };
  "/api/v1/categories/{id}": {
    get: operations["CategoriesController_getCategory"];
    put: operations["CategoriesController_updateCategory"];
    delete: operations["CategoriesController_deleteCategory"];
  };
  "/api/v1/addons": {
    get: operations["AddonsController_getAllAddons"];
    post: operations["AddonsController_createAddon"];
  };
  "/api/v1/addons/{id}": {
    get: operations["AddonsController_getAddon"];
    put: operations["AddonsController_updateAddon"];
    delete: operations["AddonsController_deleteAddon"];
  };
  "/api/v1/menus": {
    get: operations["MenusController_getMenus"];
    post: operations["MenusController_createMenu"];
    delete: operations["MenusController_removeMenus"];
  };
  "/api/v1/menus/{id}": {
    get: operations["MenusController_getMenuById"];
    put: operations["MenusController_updateMenuById"];
    delete: operations["MenusController_removeMenuById"];
  };
  "/api/v1/menus/{id}/publish": {
    patch: operations["MenusController_publishMenuById"];
  };
  "/api/v1/menus/{id}/unpublish": {
    patch: operations["MenusController_unpublishMenuById"];
  };
  "/api/v1/sessions": {
    get: operations["SessionController_getSessions"];
    post: operations["SessionController_createSession"];
  };
  "/api/v1/sessions/{id}": {
    get: operations["SessionController_getSession"];
    delete: operations["SessionController_deleteSession"];
  };
  "/api/v1/sessions/table/{id}": {
    get: operations["SessionController_getSessionByTable"];
  };
  "/api/v1/sessions/{id}/finish": {
    patch: operations["SessionController_finishSession"];
  };
  "/api/v1/tables": {
    get: operations["TablesController_getTables"];
    post: operations["TablesController_createTable"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    HealthResponseDto: {
      id: string;
      /** Format: date-time */
      createdAt: string;
      /**
       * @description Health status
       * @example OK
       */
      status: string;
    };
    CategoryDto: {
      title: string;
      description: string;
    };
    CreateAddonDto: {
      title: string;
      price: number;
    };
    CategorySchema: {
      /** @description Category ID */
      _id: string;
      title: string;
      description: string;
    };
    AddonSchema: {
      /** @description Addon ID */
      _id: string;
      title: string;
      price: number;
    };
    GetMenuByIdResponseDto: {
      image: string;
      name: string;
      description: string;
      price: number;
      category: string;
      addons: components["schemas"]["AddonSchema"][];
      /** Format: date-time */
      published_at: string;
      /** Format: date-time */
      deleted_at: string;
    };
    GetAllMenuResponseDto: {
      category: components["schemas"]["CategorySchema"];
      menus: components["schemas"]["GetMenuByIdResponseDto"][];
    };
    CreateMenuDto: {
      image: string;
      name: string;
      description: string;
      price: number;
      category: string;
      addons: string[];
    };
    MenuSchema: {
      /** @description Menu ID */
      _id: string;
      image: string;
      name: string;
      description: string;
      price: number;
      category: string;
      addons: string[];
      /** Format: date-time */
      published_at: string;
      /** Format: date-time */
      deleted_at: string;
    };
    SessionSchema: {
      /** @description Session ID */
      _id: string;
      /**
       * Format: date-time
       * @description Session creation date
       */
      created_at: string;
      /**
       * Format: date-time
       * @description Session finish date
       */
      finished_at: string | null;
      /** @description User ID */
      uid: string | null;
      /** @description Table ID */
      table: number;
    };
    CreateSessionDto: {
      /** @description User ID */
      uid?: string;
      /** @description Table ID */
      table: number;
    };
    TablesDto: {
      _id: number;
    };
    TablesSchema: {
      _id: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  HealthController_getHealth: {
    responses: {
      /** @description Health status */
      200: {
        content: {
          "application/json": components["schemas"]["HealthResponseDto"];
        };
      };
    };
  };
  HealthController_getPing: {
    responses: {
      /** @description Health status (Not connected to DB) */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  CategoriesController_getAllCategories: {
    responses: {
      /** @description Get all categories */
      200: never;
    };
  };
  CategoriesController_createCategory: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CategoryDto"];
      };
    };
    responses: {
      /** @description Created new category */
      201: never;
    };
  };
  CategoriesController_getCategory: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Get all categories */
      200: never;
    };
  };
  CategoriesController_updateCategory: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CategoryDto"];
      };
    };
    responses: {
      /** @description Update category */
      200: never;
    };
  };
  CategoriesController_deleteCategory: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Delete category */
      204: never;
    };
  };
  AddonsController_getAllAddons: {
    responses: {
      /** @description Get all addons */
      200: {
        content: {
          "application/json": components["schemas"]["CreateAddonDto"][];
        };
      };
    };
  };
  AddonsController_createAddon: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateAddonDto"];
      };
    };
    responses: {
      /** @description Created addon */
      201: {
        content: {
          "application/json": components["schemas"]["CreateAddonDto"];
        };
      };
    };
  };
  AddonsController_getAddon: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Get addon by Id */
      200: {
        content: {
          "application/json": components["schemas"]["CreateAddonDto"];
        };
      };
      /** @description Addon not found */
      404: never;
    };
  };
  AddonsController_updateAddon: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateAddonDto"];
      };
    };
    responses: {
      /** @description Updated addon */
      200: {
        content: {
          "application/json": components["schemas"]["CreateAddonDto"];
        };
      };
      /** @description Addon not found */
      404: never;
    };
  };
  AddonsController_deleteAddon: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Deleted addon */
      204: never;
      /** @description Addon not found */
      404: never;
    };
  };
  MenusController_getMenus: {
    parameters: {
      query: {
        status: "published" | "draft" | "all";
      };
    };
    responses: {
      /** @description Get all menus */
      200: {
        content: {
          "application/json": components["schemas"]["GetAllMenuResponseDto"][];
        };
      };
    };
  };
  MenusController_createMenu: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateMenuDto"];
      };
    };
    responses: {
      /** @description The menu has been successfully created. */
      201: {
        content: {
          "application/json": components["schemas"]["MenuSchema"];
        };
      };
    };
  };
  MenusController_removeMenus: {
    parameters: {
      query: {
        ids: string[];
      };
    };
    responses: {
      /** @description The menus have been successfully deleted. */
      200: never;
      /** @description No menu found */
      204: never;
    };
  };
  MenusController_getMenuById: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Get menu by id */
      200: {
        content: {
          "application/json": components["schemas"]["GetMenuByIdResponseDto"];
        };
      };
      /** @description No menu found */
      404: never;
    };
  };
  MenusController_updateMenuById: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateMenuDto"];
      };
    };
    responses: {
      /** @description The menu has been successfully updated. */
      200: never;
      /** @description No menu found */
      404: never;
    };
  };
  MenusController_removeMenuById: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description The menu has been successfully deleted. */
      200: never;
      /** @description No menu found */
      204: never;
    };
  };
  MenusController_publishMenuById: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description The menu has been successfully published. */
      200: never;
      /** @description No menu found */
      404: never;
    };
  };
  MenusController_unpublishMenuById: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description The menu has been successfully unpublished. */
      200: never;
      /** @description No menu found */
      404: never;
    };
  };
  SessionController_getSessions: {
    parameters: {
      query?: {
        finished?: boolean;
      };
    };
    responses: {
      /** @description Sessions list */
      200: {
        content: {
          "application/json": components["schemas"]["SessionSchema"][];
        };
      };
    };
  };
  SessionController_createSession: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateSessionDto"];
      };
    };
    responses: {
      /** @description Session created */
      201: {
        content: {
          "application/json": components["schemas"]["SessionSchema"];
        };
      };
    };
  };
  SessionController_getSession: {
    parameters: {
      path: {
        /** @description Session ID (ObjectID) */
        id: string;
      };
    };
    responses: {
      /** @description Session */
      200: {
        content: {
          "application/json": components["schemas"]["SessionSchema"];
        };
      };
    };
  };
  SessionController_deleteSession: {
    parameters: {
      path: {
        /** @description Session ID (ObjectId) */
        id: string;
      };
    };
    responses: {
      /** @description Session deleted */
      204: never;
      /** @description Session not found */
      404: never;
    };
  };
  SessionController_getSessionByTable: {
    parameters: {
      path: {
        /** @description Table ID */
        id: number;
      };
    };
    responses: {
      /** @description Session */
      200: {
        content: {
          "application/json": components["schemas"]["SessionSchema"];
        };
      };
      /** @description No session found in the table */
      404: never;
    };
  };
  SessionController_finishSession: {
    parameters: {
      path: {
        /** @description Session ID (ObjectId) */
        id: string;
      };
    };
    responses: {
      /** @description Session finished */
      204: never;
      /** @description Session not found */
      404: never;
    };
  };
  TablesController_getTables: {
    responses: {
      /** @description Get tables */
      200: {
        content: {
          "application/json": components["schemas"]["TablesSchema"][];
        };
      };
    };
  };
  TablesController_createTable: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TablesDto"];
      };
    };
    responses: {
      /** @description Create table */
      201: never;
    };
  };
}
